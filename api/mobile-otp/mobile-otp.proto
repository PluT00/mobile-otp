syntax = "proto3";

package mobile.otpgrpc;

option go_package = "github.com/PluT00/mobile-otp/api/mobile-otp;otpgrpc";

import "google/api/annotations.proto";

service MobileOTP {
  // SyncKeys - sync ecdh public keys
  rpc SyncKeys(SyncKeysRequest) returns (SyncKeysResponse) {
    option (google.api.http) = {
      post: "/sync-keys"
      body: "*"
    };
  }

  // GetOTP - send previously generated OTP to user
  rpc GetOTP(GetOTPRequest) returns (GetOTPResponse) {
    option (google.api.http) = {
      post: "/get-otp"
      body: "*"
    };
  }

  // NeedOTP - request for generating OTP for exact user
  rpc NeedOTP(NeedOTPRequest) returns (NeedOTPResponse) {}
  // ValidateOTP - validate OTP sent by user into main service
  rpc ValidateOTP(ValidateOTPRequest) returns (ValidateOTPResponse) {}
}

message OTP {
  string code = 1;
}

message NeedOTPRequest {
  string id = 1;
}

message NeedOTPResponse {
  bool success = 1;
}

message ValidateOTPRequest {
  string id = 1;
  OTP otp = 2;
}

message ValidateOTPResponse {
  bool ok = 1;
}

message SyncKeysRequest {
  // Client public key (Base64)
  string public_key = 1;
  // Random number to find public key later in GetOTP request
  int32 nonce = 2;
}

message SyncKeysResponse {
  // Server public key (Base64)
  string public_key = 1;
}

message GetOTPRequest {
  // Encrypted JWT, must be with mobile=true flag
  string encrypted_jwt = 1;
  // Random number sent previously in SyncKeys request
  int32 nonce = 2;
}

message GetOTPResponse {
  // Encrypted OTP (Base64)
  string encrypted_otp = 1;
  // Success flag; false if there is no request to generate OTP for that user
  bool success = 3;
}