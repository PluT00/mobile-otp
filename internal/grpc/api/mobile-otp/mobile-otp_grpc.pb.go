// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/mobile-otp/mobile-otp.proto

package otpgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MobileOTP_CreateOTP_FullMethodName = "/mobile.otpgrpc.MobileOTP/CreateOTP"
	MobileOTP_CheckOTP_FullMethodName  = "/mobile.otpgrpc.MobileOTP/CheckOTP"
)

// MobileOTPClient is the client API for MobileOTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobileOTPClient interface {
	// CreateOTP - запрос на создание OTP для последующего запроса с клиента (например, мобильного телефона)
	CreateOTP(ctx context.Context, in *CreateOTPRequest, opts ...grpc.CallOption) (*CreateOTPResponse, error)
	// CheckOTP - запрос на проверку правильности OTP кода, присланного основным сервисом
	CheckOTP(ctx context.Context, in *CheckOTPRequest, opts ...grpc.CallOption) (*CheckOTPResponse, error)
}

type mobileOTPClient struct {
	cc grpc.ClientConnInterface
}

func NewMobileOTPClient(cc grpc.ClientConnInterface) MobileOTPClient {
	return &mobileOTPClient{cc}
}

func (c *mobileOTPClient) CreateOTP(ctx context.Context, in *CreateOTPRequest, opts ...grpc.CallOption) (*CreateOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOTPResponse)
	err := c.cc.Invoke(ctx, MobileOTP_CreateOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileOTPClient) CheckOTP(ctx context.Context, in *CheckOTPRequest, opts ...grpc.CallOption) (*CheckOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOTPResponse)
	err := c.cc.Invoke(ctx, MobileOTP_CheckOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobileOTPServer is the server API for MobileOTP service.
// All implementations must embed UnimplementedMobileOTPServer
// for forward compatibility.
type MobileOTPServer interface {
	// CreateOTP - запрос на создание OTP для последующего запроса с клиента (например, мобильного телефона)
	CreateOTP(context.Context, *CreateOTPRequest) (*CreateOTPResponse, error)
	// CheckOTP - запрос на проверку правильности OTP кода, присланного основным сервисом
	CheckOTP(context.Context, *CheckOTPRequest) (*CheckOTPResponse, error)
	mustEmbedUnimplementedMobileOTPServer()
}

// UnimplementedMobileOTPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMobileOTPServer struct{}

func (UnimplementedMobileOTPServer) CreateOTP(context.Context, *CreateOTPRequest) (*CreateOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOTP not implemented")
}
func (UnimplementedMobileOTPServer) CheckOTP(context.Context, *CheckOTPRequest) (*CheckOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOTP not implemented")
}
func (UnimplementedMobileOTPServer) mustEmbedUnimplementedMobileOTPServer() {}
func (UnimplementedMobileOTPServer) testEmbeddedByValue()                   {}

// UnsafeMobileOTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobileOTPServer will
// result in compilation errors.
type UnsafeMobileOTPServer interface {
	mustEmbedUnimplementedMobileOTPServer()
}

func RegisterMobileOTPServer(s grpc.ServiceRegistrar, srv MobileOTPServer) {
	// If the following call pancis, it indicates UnimplementedMobileOTPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MobileOTP_ServiceDesc, srv)
}

func _MobileOTP_CreateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileOTPServer).CreateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileOTP_CreateOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileOTPServer).CreateOTP(ctx, req.(*CreateOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileOTP_CheckOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileOTPServer).CheckOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileOTP_CheckOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileOTPServer).CheckOTP(ctx, req.(*CheckOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MobileOTP_ServiceDesc is the grpc.ServiceDesc for MobileOTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MobileOTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobile.otpgrpc.MobileOTP",
	HandlerType: (*MobileOTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOTP",
			Handler:    _MobileOTP_CreateOTP_Handler,
		},
		{
			MethodName: "CheckOTP",
			Handler:    _MobileOTP_CheckOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mobile-otp/mobile-otp.proto",
}
